using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace DurandalAuth.Domain.Models.Mapping
{
    public class afm_userprocsMap : EntityTypeConfiguration<afm_userprocs>
    {
        public afm_userprocsMap()
        {
            // Primary Key
            this.HasKey(t => new { t.user_name, t.activity_id, t.process_id });

            // Properties
            this.Property(t => t.transfer_status)
                .IsRequired()
                .IsFixedLength()
                .HasMaxLength(10);

            this.Property(t => t.user_name)
                .IsRequired()
                .IsFixedLength()
                .HasMaxLength(64);

            this.Property(t => t.activity_id)
                .IsRequired()
                .IsFixedLength()
                .HasMaxLength(32);

            this.Property(t => t.process_id)
                .IsRequired()
                .IsFixedLength()
                .HasMaxLength(32);

            // Table & Column Mappings
            this.ToTable("afm_userprocs", "afm");
            this.Property(t => t.autogenerated).HasColumnName("autogenerated");
            this.Property(t => t.internal_use1).HasColumnName("internal_use1");
            this.Property(t => t.transfer_status).HasColumnName("transfer_status");
            this.Property(t => t.user_name).HasColumnName("user_name");
            this.Property(t => t.activity_id).HasColumnName("activity_id");
            this.Property(t => t.process_id).HasColumnName("process_id");

            // Relationships
            this.HasRequired(t => t.afm_activities)
                .WithMany(t => t.afm_userprocs)
                .HasForeignKey(d => d.activity_id);
            this.HasRequired(t => t.afm_processes)
                .WithMany(t => t.afm_userprocs)
                .HasForeignKey(d => new { d.activity_id, d.process_id });
            this.HasRequired(t => t.afm_users)
                .WithMany(t => t.afm_userprocs)
                .HasForeignKey(d => d.user_name);

        }
    }
}
